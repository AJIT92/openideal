<?php


//define('POPULAR_FLAG', 19);
define('WORTH_CHECKING_FLAG', 13);

/**
 * Implements hook_init().
().
 */
function ideal_project_init() {

}

/**
 * Implements hook_node_presave().
 */
function ideal_project_node_presave($node) {
//  if (TRUE) {
//    if ($node->type == 'project') {
//      $ideas_ref_db_info = content_database_info(content_fields('field_ideas_ref', 'project'));
//      $in_action_db_info = content_database_info(content_fields('field_in_action', 'idea'));
//
//      $ideas_ref_field = $ideas_ref_db_info['columns']['nid']['column'];
//      $ideas_ref_table = $ideas_ref_db_info['table'];
//
//      $in_action_field = $in_action_db_info['columns']['value']['column'];
//      $in_action_table = $in_action_db_info['table'];
//
//      $self_in_action = $node->field_in_action['0']['value'];
//
//      // TODO Please convert this statement to the D7 database API syntax.
//      db_query(
//        "UPDATE {$in_action_table}
//        SET {$in_action_field} = '$self_in_action'
//        WHERE nid IN (
//          SELECT $ideas_ref_field        
//          FROM $ideas_ref_table  
//          WHERE nid = $node->nid
//        )"
//      );
//    }
//  }
}

/**
 * Implements hook_nodeapi().
().
 *
 * @param &$node The node the action is being performed on.
 * @param $op What kind of action is being performed. Possible values: alter, delete, delete revision, insert, load, prepare, prepare translation, print, rss item, search result, presave, update, update index, validate, view
 * @param $a3
 * @param $a4
 */

/**
 * Implements hook_comment_insert().
 */
function ideal_project_comment_insert($comment) {
//  if (TRUE) {
//    if ($node_type == 'project') {
//      $ideas_ref_db_info = content_database_info(content_fields('field_ideas_ref', 'project'));
//      $ideas_ref_field = $ideas_ref_db_info['columns']['nid']['column'];
//      $ideas_ref_table = $ideas_ref_db_info['table'];
//      // TODO Please convert this statement to the D7 database API syntax.
//      $result = db_query("SELECT $ideas_ref_field FROM $ideas_ref_table WHERE nid = %d", $nid);
//      while ($fetch = db_fetch_array($result)) {
//        $idea_comment_fields = array();
//        $idea_comment_fields['values']['author'] = $user->name;
//        $idea_comment_fields['values']['subject'] = $a1->subject;
//        $idea_comment_fields['values']['comment'] = $a1->comment;
//        $idea_comment_fields['values']['op'] = t('Save');
//        $idea_comment_fields['values']['nid'] = $fetch['field_ideas_ref_nid'];
//        comment_form_submit("comment_form", $idea_comment_fields);
//      }
//    }
//  }
}

/**
 * Implements hook_comment().
().
 * Create comment for any idea under the project when project is commented.
 * @param unknown_type $a1
 * @param unknown_type $op
 */
function ideal_project_comment_OLD(&$a1, $op) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  global $user;
  $nid = $a1->nid;
  $node_type = db_query("SELECT type FROM {node} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ideal_project_flag_popular($nid) {
  if (ideal_project_is_popular($nid)) {
    $flag_popular = flag_get_flag('popular');
    $flag_popular->flag('flag', $nid);

    $flag_worth_checking = flag_get_flag('worth_checking');
    $flag_worth_checking->flag('flag', $nid);
  }
  else {
    $flag_popular = flag_get_flag('popular');
    $flag_popular->flag('unflag', $nid);
  }
}

/**
 * Check if the SUM of comments and votes on all ideas connected to project gets to popular.
 * @param $nid
 * @return boolean
 */
function ideal_project_is_popular($nid) {
  $ideas_ref_db_info = content_database_info(content_fields('field_ideas_ref', 'project'));
  $ideas_ref_field = $ideas_ref_db_info['columns']['nid']['column'];
  $ideas_ref_table = $ideas_ref_db_info['table'];

  $comment_value = variable_get('idea_popular_comment_points', 0);
  $vote_value = variable_get('pidea_popular_vote_points', 0);
  $total_value = variable_get('idea_popular_total', 0);
  $period = variable_get('idea_popular_period', 0);
  $time_ago = REQUEST_TIME - $period;

  // TODO Please convert this statement to the D7 database API syntax.
  $comments = db_query(
  	"SELECT COUNT(*) 
    FROM {comments} c 
    INNER JOIN $ideas_ref_table i 
    ON i.$ideas_ref_field = c.nid 
    WHERE i.nid = $nid 
    AND timestamp >= %d",   
    $time_ago)->fetchField();

  // TODO Please convert this statement to the D7 database API syntax.
  $votes = db_query(
    "SELECT COUNT(*) 
    FROM {votingapi_vote} v 
    INNER JOIN $ideas_ref_table i 
    ON i.$ideas_ref_field = v.content_id 
    WHERE i.nid = $nid 
    AND timestamp >= %d",   
    $time_ago)->fetchField();

  $comments = $comments * $comment_value;
  $votes = $votes * $vote_value;

  return $comments + $votes >= $total_value ? TRUE : FALSE;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ideal_project_cron() {
  if (!variable_get('ideal_last_cron', REQUEST_TIME)) {
    variable_set('ideal_last_cron', REQUEST_TIME);
  }
  if (variable_get('ideal_last_cron', REQUEST_TIME) <= REQUEST_TIME - (60 * 60 * 24)) {
    $result = db_query("SELECT content_id FROM {flag_content} WHERE fid = :fid", array(':fid' => POPULAR_FLAG));
    while ($fetch = db_fetch_array($result)) {
      ideal_project_flag_popular($fetch['content_id']);
      ideal_add_project_when_idea_is_worth_checking();
    }
  }
}

function _ideal_add_project_when_idea_is_worth_checking() {
  $result = db_query("SELECT content_id FROM {flag_content} WHERE fid = :fid", array(':fid' => WORTH_CHECKING_FLAG));
  while ($fetch = db_fetch_array($result)) {
    $nid = ($fetch['content_id']);
    $node = noad_load($nid);
    if (!$node->field_project[0]['items'][0]['nid']) {
      $newnode = new stdClass();
      $newnode->title = $node->title;
      $newnode->body = $node->body;
      $newnode->uid = 1;
      $newnode->type = 'project';
      $newnode->taxonomy = $node->taxonomy;
      node_save($newnode);
    }
    $flag_worth_checking = flag_get_flag('worth_checking');
    $flag_worth_checking->flag('flag', $newnode->nid);
  }
}

/*****************************************/
/************* NEW STUFF *****************/
/*****************************************/

function ideal_project_flag($action, $flag, $content_id, $account) {
  if ($action == 'flag' && $flag->name == 'popular_idea') {
    // Do stuff to the idea node:
    $idea = node_load($content_id);
    if ($idea->type == "idea") {
      // close it for comments
      $wrp = entity_metadata_wrapper('node', $idea);
      $wrp->comment->set(1);
      // set the in_action field to the first option
      $in_action_values = field_info_field('field_in_action');
      $in_action_values = array_shift($in_action_values['settings']['allowed_values']);
      $wrp->field_in_action->set($in_action_values);
      
      // Create the new project node
      $project = entity_create('node', array(
            'title' => $idea->title,
            'body' => $idea->body,
            'language' => $idea->language,
            'uid' => 1,
            'type' => 'project',
            'field_category' => $idea->field_category,
          ));
      entity_save('node', $project);
      $project_wrp = entity_metadata_wrapper('node', $project);
      $project_wrp->field_in_action->set($in_action_values);
      $project_wrp->field_idea_ref->set(array(0 => 5));
      $project_wrp->save();
      
      // give the idea a reference to the new project 
      $wrp->field_project_ref->set($project->nid);       
      // save the changes to the idea
      $wrp->save();
      
      // give the new project the idea's voting count
      $node_votes = votingapi_select_results(array('entity_id' => $content_id));
      $vote = array(
        'value' => $node_votes[3]['value'],  
        'entity_id' => $project->nid,
        'value_type' => 'points',   
      );
      $votes = array(0 => $vote);
      $vote = votingapi_set_votes($votes);

      // Flag the project as popular
      $flag = flag_get_flag('popular_idea');
      $flag->flag('flag', $project->nid);
    }
  }
}


/*
 * Implementation of hook_node_view()
 * 
 * Disable voting on flagged (popular idea) nodes.
 * 
 */

function ideal_project_node_view(&$node) {
  $flag = flag_get_flag('popular_idea');
  if ($flag->is_flagged($node->nid)) {
    $tag = variable_get('vud_tag', 'vote');
    $widget = variable_get('vud_node_widget', 'updown');
    
    $theme_vars = array(
        'entity_id' => $node->nid,
        'type' => 'node',
        'widget_theme' => 'alternate',
        'tag' => $tag,
        'readonly' => TRUE
    );
    
    $node->content['field_vote'][0]['#markup'] = theme('vud_widget', $theme_vars);
  }
}