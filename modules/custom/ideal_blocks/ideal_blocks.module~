<?php

/**
 * Implements hook_block_info().
 */
function ideal_blocks_block_info() {
	$blocks = array();
  $blocks['challenge_stats'] = array(
		'info' => t('Challenge Statistics Block'),
	);
  $blocks['ideal_key_stats'] = array(
		'info' => t('Key Statistics Block'),
	);
	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ideal_blocks_block_view($delta = '') {
  switch($delta) {
    case 'challenge_stats':
      $block = array(
        'content' => _ideal_blocks_challenge_stats(),
      );
      break;
    case 'ideal_key_stats':
      $block = array(
        'subject' => t('Key stats'),
        'content' => _ideal_blocks_key_stats(),
      );
      break;
  }
  return $block;
}

/**
 * Get statistics for a challenge.
 */
function _ideal_blocks_challenge_stats() {
  $entity = menu_get_object();
	if ($entity) {
		$node = entity_metadata_wrapper('node', $entity);
    $nid = $node->getIdentifier();

    // Count all the published ideas belonging to this challenge.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'idea')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_challenge_ref', 'target_id', $nid);
    $idea_count = $query->count()->execute();

    // Count all the comments in this challenge.
    $query = db_select('comment', 'c');
    $query->join('field_data_field_challenge_ref', 'n', 'c.nid = n.entity_id');
    $query->fields('c', array('cid'));
    $query->condition('c.status', 1);
    $query->condition('n.field_challenge_ref_target_id', $nid);
    $result = $query->execute();
    $comment_count = $result->rowCount();

    // Count all the votes in this challenge.
    $query = db_select('votingapi_vote', 'v');
    $query->join('field_data_field_challenge_ref', 'n', 'v.entity_id = n.entity_id');
    $query->fields('v', array('vote_id'));
    $query->condition('v.entity_type', 'node');
    $query->condition('v.value_type', 'points');
    $query->condition('v.tag', 'vote');
    $query->condition('v.value', 1);
    $query->condition('n.field_challenge_ref_target_id', $nid);
    $result = $query->execute();
    $vote_count = $result->rowCount();

    // Count all users who commented on an idea in this challenge.
    $query = db_select('comment', 'c');
    $query->join('field_data_field_challenge_ref', 'n', 'c.nid = n.entity_id');
    $query->fields('c', array('uid'));
    $query->condition('n.field_challenge_ref_target_id', $nid);
    $query->distinct();
    $result = $query->execute();
    $user_count = $result->rowCount();

    // Generate output.
    $output = '<div id="ideal-challenge-stats">';
    $output .= '<div class="row ideas"><div class="col-xs-12"><div class="count">' . format_plural($idea_count, '1 Idea', '@count Ideas') . '</div></div></div>';
    $output .= '<div class="row counts">';
    $output .= '<div class="col-xs-4 users"><div class="count">' . format_plural($user_count, '1 User', '@count Users') . '</div></div>';
    $output .= '<div class="col-xs-4 votes"><div class="count">' . format_plural($vote_count, '1 Vote', '@count Votes') . '</div></div>';
    $output .= '<div class="col-xs-4 comments"><div class="count">' . format_plural($comment_count, '1 Comment', '@count Comments') . '</div></div>';
    $output .= '</div></div>';

    return $output;
  }
}

/**
 * Get key statistics for all challenges.
 */
function _ideal_blocks_key_stats() {
  // Count all the published challenges.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'challenge')
    ->propertyCondition('status', 1);
  $challenge_count = $query->count()->execute();

  // Count all the published ideas of all challenges.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'idea')
    ->propertyCondition('status', 1);
  $idea_count = $query->count()->execute();

  // Count all users registered to the site.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->propertyCondition('status', 1);
  $user_count = $query->count()->execute();

  // Count all the votes from all ideas.
  $result = db_select('votingapi_vote', 'v')
    ->fields('v', array('vote_id'))
    ->condition('v.entity_type', 'node')
    ->condition('v.value_type', 'points')
    ->condition('v.tag', 'vote')
    ->condition('v.value', 1)
    ->execute();
  $vote_count = $result->rowCount();

  // Generate output.
  $output = '<div id="ideal-key-stats">';
  $output .= '<div class="row ideas"><div class="col-xs-12"><div class="count">' . format_plural($challenge_count, '1 Challenge', '@count Challenges') . '</div></div></div>';
  $output .= '<div class="row counts">';
  $output .= '<div class="col-xs-4 ideas"><div class="count">' . format_plural($idea_count, '1 Idea', '@count Ideas') . '</div></div>';
  $output .= '<div class="col-xs-4 users"><div class="count">' . format_plural($user_count, '1 User', '@count Users') . '</div></div>';
  $output .= '<div class="col-xs-4 votes"><div class="count">' . format_plural($vote_count, '1 Vote', '@count Votes') . '</div></div>';
  $output .= '</div></div>';

  return $output;
}
